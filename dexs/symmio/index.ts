import request from "graphql-request";
import { Chain, FetchOptions, FetchResult, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

type DailyHistory = {
  platformFee: string
  symmioShare: string
  tradeVolume: string
  day: string
  accountSource: string
  openInterest: string
  source: string
}

type DailySolver = {
  openInterest: string
}

const config: Partial<Record<Chain, string>> = {
  [CHAIN.ARBITRUM]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/arbitrum_analytics/latest/gn',
  [CHAIN.BASE]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/base_analytics/latest/gn',
  [CHAIN.BSC]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/bnb_analytics/latest/gn',
  [CHAIN.MANTLE]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/mantle_analytics/latest/gn',
  [CHAIN.BERACHAIN]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/bera_analytics/latest/gn',
  [CHAIN.MODE]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/mode_analytics/latest/gn',
  [CHAIN.SONIC]: 'https://api.goldsky.com/api/public/project_cm1hfr4527p0f01u85mz499u8/subgraphs/sonic_analytics/latest/gn'
}

const methodology = {
  Volume: 'Total volume generated by builders through Symmio.',
  Fees: 'Total fees generated through Symmio.',
  Revenue: 'Portion of the fees retained by Symmio.',
  SupplySideRevenue: 'Portion of the fees retained by builders'
}

const start = '2025-09-30'

const solverQuery = `
  query ($day: String!) {
    solverDailyHistories (where: {day: $day}) {
      openInterest
    }
  }
`

const query = `
  query ($day: String!) {
    dailyHistories(where: { day: $day }) {
      platformFee
      symmioShare
      tradeVolume
      day
      accountSource
      openInterest
      source
    }
  }
`

const fetch = async ({ chain, startOfDay, createBalances }: FetchOptions): Promise<FetchResult> => {
  const endpoint = config[chain]
  if (!endpoint) return {}

  const day = String(Math.floor(startOfDay / 86400))
  const dailyVolume = createBalances()
  const dailyFees = createBalances()
  const dailyRevenue = createBalances()
  const dailySupplySideRevenue = createBalances()
  const openInterestAtEnd = createBalances()

  const { dailyHistories }: { dailyHistories: DailyHistory[] } = await request(endpoint, query, { day })
  const { solverDailyHistories }: { solverDailyHistories: DailySolver[] } = await request(endpoint, solverQuery, { day })

  dailyHistories.forEach(({ platformFee, symmioShare, tradeVolume, openInterest } ) => {
    const fee = Number(platformFee) / 1e18
    const share = Number(symmioShare) / 1e18
    const volume = Number(tradeVolume) / 1e18
    const oi = Number(openInterest) / 1e18

    dailyVolume.addUSDValue(volume)
    dailyFees.addUSDValue(fee)
    dailyRevenue.addUSDValue(share)
    dailySupplySideRevenue.addUSDValue(fee - share)
    openInterestAtEnd.addUSDValue(oi)
  })

  solverDailyHistories.forEach(({ openInterest }) => {
    openInterestAtEnd.addUSDValue(Number(openInterest) / 1e18)
  })

  return { dailyVolume, dailyFees, dailyRevenue, dailySupplySideRevenue, openInterestAtEnd }
}

const adapters: SimpleAdapter = {
  version: 1,
  adapter: Object.fromEntries(Object.keys(config).map((chain) => [chain, { fetch }, methodology, start]))
}

export default adapters